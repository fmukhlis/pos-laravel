{
    "openapi": "3.0.3",
    "info": {
        "title": "Moncip API",
        "description": "This is a complete Moncip API documentation. Moncip is a free POS application that can be used by any micro and small businesses around the world.",
        "contact": {
            "email": "cipherporu9@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "servers": [{ "url": "http://localhost:8000/api/v1" }],
    "security": [{ "bearerAuth": [] }],
    "tags": [
        { "name": "Store", "description": "Operations about store" },
        { "name": "Employee", "description": "Operations about employee" },
        { "name": "Customer", "description": "Operations about customer" },
        {
            "name": "Payment Method",
            "description": "Operations about payment method"
        },
        { "name": "Permission", "description": "Operations about permission" },
        {
            "name": "Product Category",
            "description": "Operations about product category"
        },
        { "name": "Product", "description": "Operations about product" },
        { "name": "Order", "description": "Operations about order" }
    ],
    "paths": {
        "/stores": {
            "post": {
                "tags": ["Store"],
                "summary": "Create a new store",
                "description": "Create a new store",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateStore"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Store"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{storeId}": {
            "get": {
                "tags": ["Store"],
                "summary": "Get a store by ID",
                "description": "Return a single store",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store to return",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/components/schemas/Store"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "owner": {
                                                            "$ref": "#/components/schemas/User"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "put": {
                "tags": ["Store"],
                "summary": "Update an existing store",
                "description": "Update a store by ID",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store to be updated",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateStore"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Store"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            },
            "delete": {
                "tags": ["Store"],
                "summary": "Delete an existing store",
                "description": "Delete a store by ID",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store to be deleted",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful operation" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            }
        },
        "/stores/{storeId}/employee": {
            "get": {
                "tags": ["Employee"],
                "summary": "Get all employees of a store",
                "description": "Return all employees of a store",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Employee"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "post": {
                "tags": ["Employee"],
                "summary": "Invite a user as an employee",
                "description": "Send invitation to single or multiple user (with its id)",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InviteEmployee"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invitation sent."
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Employee"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{storeId}/employee/{employeeId}": {
            "delete": {
                "tags": ["Employee"],
                "summary": "Remove an employee from a store",
                "description": "Remove an employee from a store",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "employeeId",
                        "in": "path",
                        "description": "ID of an employee to be removed",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful opertaion" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            }
        },
        "/stores/{storeId}/customers": {
            "get": {
                "tags": ["Customer"],
                "summary": "Get all customers",
                "description": "Return all customers of a store",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Customer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "post": {
                "tags": ["Customer"],
                "summary": "Add customer",
                "description": "Create a new customer",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCustomer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Customer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{storeId}/customers/{customerId}": {
            "get": {
                "tags": ["Customer"],
                "summary": "Get single customer",
                "description": "Return single customer",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of a customer",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Customer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "put": {
                "tags": ["Customer"],
                "summary": "Update customer",
                "description": "Update a customer",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of a customer",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCustomer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Customer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            },
            "delete": {
                "tags": ["Customer"],
                "summary": "Delete customer",
                "description": "Remove a customer from a store",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of a customer",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful operation" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            }
        },
        "/stores/{store}/payment-methods": {
            "get": {
                "tags": ["Payment Method"],
                "summary": "Get all payment methods",
                "description": "Retrieve all available payment methods for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PaymentMethod"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "post": {
                "tags": ["Payment Method"],
                "summary": "Create new payment method",
                "description": "Add a new payment method for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePaymentMethod"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/PaymentMethod"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{store}/payment-methods/{paymentMethod}": {
            "get": {
                "tags": ["Payment Method"],
                "summary": "Get single payment method",
                "description": "Retrieve a single payment method for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "ID of a payment method",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/PaymentMethod"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "put": {
                "tags": ["Payment Method"],
                "summary": "Update payment method",
                "description": "Update an existing payment method for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "ID of a payment method",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePaymentMethod"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/PaymentMethod"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            },
            "delete": {
                "tags": ["Payment Method"],
                "summary": "Delete payment method",
                "description": "Remove a payment method from a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "ID of a payment method",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful operation" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{store}/permissions": {
            "get": {
                "tags": ["Permission"],
                "summary": "Get all permission",
                "description": "Retrieve all permissions for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Permission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            },
            "post": {
                "tags": ["Permission"],
                "summary": "Create a new permission",
                "description": "Add a new permission for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePermission"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Permission"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{store}/permissions/{permission}": {
            "get": {
                "tags": ["Permission"],
                "summary": "Get single permission",
                "description": "Retrieve single permission for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "ID of a permission",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Permission"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            },
            "put": {
                "tags": ["Permission"],
                "summary": "Update a permission",
                "description": "Update an existing permission for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "ID of a permission",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePermission"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Permission"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            },
            "delete": {
                "tags": ["Permission"],
                "summary": "Delete a permission",
                "description": "Remove a permission for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "ID of a permission",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful operation" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            }
        },
        "/stores/{store}/product-categories": {
            "get": {
                "tags": ["Product Category"],
                "summary": "Get all product categories",
                "description": "Retrieve all product categories of a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductCategory"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "post": {
                "tags": ["Product Category"],
                "summary": "Create product category",
                "description": "Add a new product category for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductCategory"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ProductCategory"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{store}/product-categories/{productCategory}": {
            "get": {
                "tags": ["Product Category"],
                "summary": "Get single product category",
                "description": "Retrieve a single product category of a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "productCategory",
                        "in": "path",
                        "description": "ID of a product category",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DetailedProductCategory"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "put": {
                "tags": ["Product Category"],
                "summary": "Update a product category",
                "description": "Update an existing product category of a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "productCategory",
                        "in": "path",
                        "description": "ID of a product category",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProductCategory"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ProductCategory"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            },
            "delete": {
                "tags": ["Product Category"],
                "summary": "Delete a product category",
                "description": "Remove a product category from a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "productCategory",
                        "in": "path",
                        "description": "ID of a product category",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful operation" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            }
        },
        "/stores/{store}/products": {
            "get": {
                "tags": ["Product"],
                "summary": "Get all products",
                "description": "Retrieve products list in a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Product"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "post": {
                "tags": ["Product"],
                "summary": "Create new product",
                "description": "Add a single product for a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProduct"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Product"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{store}/products/{product}": {
            "get": {
                "tags": ["Product"],
                "summary": "Get a single product",
                "description": "Retrieve a product with more detailed information",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "product",
                        "in": "path",
                        "description": "ID of a product",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DetailedProduct"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" }
                }
            },
            "put": {
                "tags": ["Product"],
                "summary": "Update a product",
                "description": "Update an existing product of a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "product",
                        "in": "path",
                        "description": "ID of a product",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProduct"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Product"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            },
            "delete": {
                "tags": ["Product"],
                "summary": "Delete a product",
                "description": "Remove a product",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "product",
                        "in": "path",
                        "description": "ID of a product",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful operation" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            }
        },
        "/stores/{store}/orders": {
            "get": {
                "tags": ["Order"],
                "summary": "Get all orders",
                "description": "Retrieve all orders on a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Order"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            },
            "post": {
                "tags": ["Order"],
                "summary": "Make new order",
                "description": "Create a new order on a store",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrder"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Order"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{store}/orders/{order}": {
            "get": {
                "tags": ["Order"],
                "summary": "Get single order",
                "description": "Retrieve an order with more detailed information",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of an order",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DetailedOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            },
            "put": {
                "tags": ["Order"],
                "summary": "Update order data",
                "description": "Modify the order data (i.e. note, payment method, cash amount, order type, status, table number and customer)",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of an order",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrder"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Order"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            },
            "delete": {
                "tags": ["Order"],
                "summary": "Delete an order",
                "description": "Mark an order as deleted state. It won't be removed from the database. And absolutely, you can access or even recover this kind of order.",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of an order",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "204": { "description": "Successful operation" },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" }
                }
            }
        },
        "/stores/{store}/orders/{order}/split": {
            "post": {
                "tags": ["Order"],
                "summary": "Split an order",
                "description": "Split an existing order to a separate order.",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of an order",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SplitOrder"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Order"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        },
        "/stores/{store}/orders/{order}/pay": {
            "patch": {
                "tags": ["Order"],
                "summary": "Pay an order",
                "description": "Pay an order with billed status.",
                "parameters": [
                    {
                        "name": "store",
                        "in": "path",
                        "description": "ID of a store",
                        "required": true,
                        "schema": { "type": "integer" }
                    },
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of an order",
                        "required": true,
                        "schema": { "type": "integer" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Order"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": { "description": "Unauthorized" },
                    "403": { "description": "Forbidden" },
                    "422": { "description": "Validation exception" }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        },
        "schemas": {
            "CreateStore": {
                "type": "object",
                "required": ["name", "phone", "email", "address"],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Coffee Cafe Boss"
                    },
                    "phone": {
                        "type": "string",
                        "example": "081234567890"
                    },
                    "email": {
                        "type": "string",
                        "example": "ccb@example.com"
                    },
                    "address": {
                        "type": "string",
                        "example": "Cirebon"
                    }
                }
            },
            "UpdateStore": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Coffee Cafe Boss"
                    },
                    "phone": {
                        "type": "string",
                        "example": "081234567890"
                    },
                    "email": {
                        "type": "string",
                        "example": "ccb@example.com"
                    },
                    "address": {
                        "type": "string",
                        "example": "Cirebon"
                    }
                }
            },
            "BaseStore": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "Coffee Cafe Boss" },
                    "phone": { "type": "string", "example": "081234567890" },
                    "email": { "type": "string", "example": "ccb@example.com" },
                    "address": { "type": "string", "example": "Cirebon" },
                    "createdAt": {
                        "type": "string",
                        "example": "2024-11-11T19:04:27.000000Z"
                    }
                }
            },
            "Store": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseStore"
                    }
                ]
            },
            "DetailedStore": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseStore"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "owner": {
                                "$ref": "#/components/schemas/BaseUser"
                            },
                            "products": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BaseProduct"
                                }
                            },
                            "productCategories": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BaseProductCategory"
                                }
                            },
                            "paymentMethods": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BasePaymentMethod"
                                }
                            },
                            "totalEmployees": {
                                "type": "integer",
                                "example": 10
                            },
                            "totalCustomers": {
                                "type": "integer",
                                "example": 100
                            }
                        }
                    }
                ]
            },

            "BaseUser": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "fullName": { "type": "string", "example": "John Doe" }
                }
            },
            "User": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseUser"
                    }
                ]
            },
            "DetailedUser": {
                "allOf": [
                    { "$ref": "#/components/schemas/BaseUser" },
                    {
                        "type": "object",
                        "properties": {
                            "role": {
                                "type": "string",
                                "example": "Premium"
                            },
                            "email": {
                                "type": "string",
                                "example": "johndoe@example.com"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+6281234567890"
                            },
                            "emailVerifiedAt": {
                                "type": "string",
                                "example": "2024-11-12T03:07:57.000000Z"
                            }
                        }
                    }
                ]
            },

            "InviteEmployee": {
                "type": "object",
                "required": ["userIds"],
                "properties": {
                    "userIds": {
                        "type": "array",
                        "items": { "type": "integer" },
                        "example": [1, 2, 3]
                    }
                }
            },
            "BaseEmployee": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "status": {
                        "type": "string",
                        "enum": ["Active", "Inactive"]
                    }
                }
            },
            "Employee": {
                "allOf": [{ "$ref": "#/components/schemas/BaseEmployee" }]
            },
            "DetailedEmployee": {
                "allOf": [
                    { "$ref": "#/components/schemas/BaseEmployee" },
                    {
                        "type": "object",
                        "properties": {
                            "user": {
                                "$ref": "#/components/schemas/BaseUser"
                            },
                            "store": {
                                "$ref": "#/components/schemas/BaseStore"
                            }
                        }
                    }
                ]
            },

            "CreateCustomer": {
                "type": "object",
                "required": ["name", "phone", "email", "gender"],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Alice"
                    },
                    "phone": {
                        "type": "string",
                        "example": "6281234567890"
                    },
                    "email": {
                        "type": "string",
                        "example": "alice@example.com"
                    },
                    "gender": {
                        "type": "string",
                        "example": "Female"
                    }
                }
            },
            "UpdateCustomer": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Alice"
                    },
                    "phone": {
                        "type": "string",
                        "example": "6281234567890"
                    },
                    "email": {
                        "type": "string",
                        "example": "alice@example.com"
                    },
                    "gender": {
                        "type": "string",
                        "example": "Female"
                    }
                }
            },
            "BaseCustomer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Alice"
                    },
                    "phone": {
                        "type": "string",
                        "example": "6281234567890"
                    },
                    "email": {
                        "type": "string",
                        "example": "alice@example.com"
                    },
                    "gender": {
                        "type": "string",
                        "example": "Female"
                    },
                    "monthlySpending": {
                        "type": "integer",
                        "example": 0
                    },
                    "annuallySpending": {
                        "type": "integer",
                        "example": 0
                    },
                    "allTimeSpending": {
                        "type": "integer",
                        "example": 0
                    }
                }
            },
            "Customer": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseCustomer"
                    }
                ]
            },
            "DetailedCustomer": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseCustomer"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "store": {
                                "$ref": "#/components/schemas/BaseStore"
                            }
                        }
                    }
                ]
            },

            "CreatePaymentMethod": {
                "type": "object",
                "required": ["name", "destination"],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "QRIS"
                    },
                    "destination": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "1234567890"
                    }
                }
            },
            "UpdatePaymentMethod": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "QRIS"
                    },
                    "destination": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "1234567890"
                    }
                }
            },
            "BasePaymentMethod": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "QRIS" },
                    "destination": { "type": "string", "example": "1234567890" }
                }
            },
            "PaymentMethod": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BasePaymentMethod"
                    }
                ]
            },
            "DetailedPaymentMethod": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BasePaymentMethod"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "store": {
                                "$ref": "#/components/schemas/BaseStore"
                            }
                        }
                    }
                ]
            },

            "CreatePermission": {
                "type": "object",
                "required": ["authorizationCode", "refund", "modifyBill"],
                "properties": {
                    "authorizationCode": {
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "description": "Number only",
                        "example": "123456"
                    },
                    "refund": {
                        "type": "boolean",
                        "example": true
                    },
                    "modifyBill": {
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "UpdatePermission": {
                "type": "object",
                "properties": {
                    "authorizationCode": {
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "description": "Number only",
                        "example": "123456"
                    },
                    "refund": {
                        "type": "boolean",
                        "example": true
                    },
                    "modifyBill": {
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "BasePermission": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "authorizationCode": {
                        "type": "string",
                        "example": "123456"
                    },
                    "refund": { "type": "boolean", "example": true },
                    "modifyBill": { "type": "boolean", "example": true }
                }
            },
            "Permission": {
                "allOf": [{ "$ref": "#/components/schemas/BasePermission" }]
            },
            "DetailedPermission": {
                "allOf": [
                    { "$ref": "#/components/schemas/BasePermission" },
                    {
                        "type": "object",
                        "properties": {
                            "store": {
                                "$ref": "#/components/schemas/BaseStore"
                            }
                        }
                    }
                ]
            },

            "CreateProductCategory": {
                "type": "object",
                "required": ["name", "productIds"],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 50,
                        "example": "Beverages"
                    },
                    "productIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                }
            },
            "UpdateProductCategory": {
                "type": "object",
                "required": ["name", "productIds"],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 50,
                        "example": "Beverages"
                    },
                    "productIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                }
            },
            "BaseProductCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Beverages"
                    },
                    "productsCount": {
                        "type": "integer",
                        "example": 10
                    }
                }
            },
            "ProductCategory": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductCategory"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "productsCount": {
                                "type": "integer",
                                "example": 5
                            }
                        }
                    }
                ]
            },
            "DetailedProductCategory": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductCategory"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "products": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BaseProduct"
                                }
                            }
                        }
                    }
                ]
            },

            "CreateProduct": {
                "type": "object",
                "required": ["name", "availableVariants"],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "Iced Tea"
                    },
                    "availableModifiers": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": ["categoryName", "values"],
                            "properties": {
                                "categoryName": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "Sugar Level"
                                },
                                "values": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "required": ["name"],
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "maxLength": 255,
                                                "example": "Low Sugar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "availableOptions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": ["categoryName", "values"],
                            "properties": {
                                "categoryName": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "Size"
                                },
                                "values": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "required": ["name"],
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "maxLength": 255,
                                                "example": "L"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "availableVariants": {
                        "type": "array",
                        "description": "Array length should be equals to the total possible combination of available option on each category. But if available options is not defined, the length should be 1.",
                        "items": {
                            "type": "object",
                            "required": ["stock", "price"],
                            "properties": {
                                "stock": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 999999,
                                    "example": 100
                                },
                                "price": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 99999999,
                                    "example": 5000
                                },
                                "sku": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "BVG001"
                                },
                                "options": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "Should match the available option value",
                                        "example": "L"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "UpdateProduct": {
                "type": "object",
                "required": ["name", "availableVariants"],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "Iced Tea"
                    },
                    "availableModifiers": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": ["categoryName", "values"],
                            "properties": {
                                "categoryName": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "Sugar Level"
                                },
                                "values": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "required": ["name"],
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "maxLength": 255,
                                                "example": "Low Sugar"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "availableOptions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": ["categoryName", "values"],
                            "properties": {
                                "categoryName": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "Size"
                                },
                                "values": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "required": ["name"],
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "maxLength": 255,
                                                "example": "L"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "availableVariants": {
                        "type": "array",
                        "description": "Array length should be equals to the total possible combination of available option on each category. But if available options is not defined, the length should be 1.",
                        "items": {
                            "type": "object",
                            "required": ["stock", "price"],
                            "properties": {
                                "stock": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 999999,
                                    "example": 100
                                },
                                "price": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 99999999,
                                    "example": 5000
                                },
                                "sku": {
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "BVG001"
                                },
                                "options": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "Should match the available option value",
                                        "example": "L"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "BaseProduct": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "Iced Tea" }
                }
            },
            "Product": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProduct"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "availableModifiers": {
                                "type": "array",
                                "items": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/BaseProductModifierCategory"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "values": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/BaseProductModifier"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "availableOptions": {
                                "type": "array",
                                "items": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/BaseProductOptionCategory"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "values": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/BaseProductOption"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "availableVariants": {
                                "type": "array",
                                "items": {                                    
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/BaseProductVariant"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "productOptions":{
                                                    "type": "array",
                                                    "items":{
                                                        "$ref": "#/components/schemas/BaseProductOption"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ]
            },
            "DetailedProduct": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Product"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "category": {
                                "$ref": "#/components/schemas/BaseProductCategory"
                            }
                        }
                    }
                ]
            },

            "CreateOrder": {
                "type": "object",
                "required": [
                    "cashAmount",
                    "orderType",
                    "status",
                    "paymentMethodId",
                    "orderedProducts"
                ],
                "properties": {
                    "cashAmount": {
                        "type": "integer",
                        "example": 10000
                    },
                    "note": {
                        "type": "string",
                        "example": "Add extra sugar"
                    },
                    "orderType": {
                        "type": "string",
                        "enum": ["Dine In", "Take Away"]
                    },
                    "status": {
                        "type": "string",
                        "enum": ["Paid", "Billed"]
                    },
                    "tableNumber": {
                        "type": "string",
                        "example": "T992"
                    },
                    "customerId": { "type": "integer", "example": 1 },
                    "paymentMethodId": { "type": "integer", "example": 1 },
                    "orderedProducts": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": ["variantId", "modifierIds"],
                            "properties": {
                                "variantId": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "modifierIds": {
                                    "type": "array",
                                    "items": { "type": "integer", "example": 1 }
                                }
                            }
                        }
                    }
                }
            },
            "UpdateOrder": {
                "type": "object",
                "required": [
                    "cashAmount",
                    "orderType",
                    "status",
                    "paymentMethodId",
                    "orderedProducts"
                ],
                "properties": {
                    "cashAmount": {
                        "type": "integer",
                        "example": 10000
                    },
                    "note": {
                        "type": "string",
                        "example": "Add extra sugar"
                    },
                    "orderType": {
                        "type": "string",
                        "enum": ["Dine In", "Take Away"]
                    },
                    "status": {
                        "type": "string",
                        "enum": ["Paid", "Billed"]
                    },
                    "tableNumber": {
                        "type": "string",
                        "example": "T992"
                    },
                    "customerId": { "type": "integer", "example": 1 },
                    "paymentMethodId": { "type": "integer", "example": 1 },
                    "orderedProducts": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": ["variantId", "modifierIds"],
                            "properties": {
                                "variantId": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "modifierIds": {
                                    "type": "array",
                                    "items": { "type": "integer", "example": 1 }
                                }
                            }
                        }
                    }
                }
            },
            "SplitOrder": {
                "type": "object",
                "properties": {
                    "orderedProducts": {
                        "type": "array",
                        "items": { "type": "integer", "example": 1 }
                    }
                }
            },
            "BaseOrder": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "cashAmount": {
                        "type": "integer",
                        "example": 10000
                    },
                    "note": {
                        "type": "string",
                        "example": "Add extra sugar"
                    },
                    "orderType": {
                        "type": "string",
                        "enum": ["Dine In", "Take Away"]
                    },
                    "status": {
                        "type": "string",
                        "enum": ["Paid", "Billed"]
                    },
                    "tableNumber": {
                        "type": "string",
                        "example": "T992"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "2024-12-03 22:10:06"
                    }
                }
            },
            "Order": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseOrder"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "orderedProducts": {
                                "type": "array",
                                "items": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/BaseOrderProductVariant"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "product": {
                                                    "$ref": "#/components/schemas/BaseProduct"
                                                },
                                                "variant": {
                                                    "allOf": [
                                                        {
                                                            "$ref": "#/components/schemas/BaseProductVariant"
                                                        },
                                                        {
                                                            "type": "object",
                                                            "properties": {
                                                                "productOptions":{
                                                                    "type": "array",
                                                                    "items":{
                                                                        "$ref": "#/components/schemas/BaseProductOption"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                "selectedModifiers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/BaseProductModifier"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ]
            },
            "DetailedOrder": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Order"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "customer": {
                                "$ref": "#/components/schemas/BaseCustomer"
                            },
                            "paymentMethod": {
                                "$ref": "#/components/schemas/BasePaymentMethod"
                            },
                            "servicedBy": {
                                "$ref": "#/components/schemas/BaseUser"
                            }
                        }
                    }
                ]
            },

            "BaseProductOptionCategory": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "Size" },
                    "status": {
                        "type": "string",
                        "enum": ["Active", "Inactive"]
                    }
                }
            },
            "BaseProductOption": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "XL" },
                    "status": {
                        "type": "string",
                        "enum": ["Active", "Inactive"]
                    }
                }
            },
            "BaseProductModifierCategory": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "Sugar Level" },
                    "status": {
                        "type": "string",
                        "enum": ["Active", "Inactive"]
                    }
                }
            },
            "BaseProductModifier": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "name": { "type": "string", "example": "Low Sugar" },
                    "status": {
                        "type": "string",
                        "enum": ["Active", "Inactive"]
                    }
                }
            },
            "BaseProductVariant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "price": {
                        "type": "integer",
                        "example": 5000
                    },
                    "stock": {
                        "type": "integer",
                        "example": 100
                    },
                    "sku": {
                        "type": "string",
                        "example": "BVG001"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["Active", "Inactive"]
                    }
                }
            },
            "BaseOrderProductVariant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "isCanceled": {
                        "type": "boolean",
                        "example": false
                    },
                    "cancelReason": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                    },
                    "canceledAt": {
                        "type": "string",
                        "nullable": true,
                        "example": "2024-12-03 22:10:06"
                    }
                }
            }
        }
    }
}
